prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
bottom_kernel <- dlnorm(prop[j],meanlog = log( current[j]),prop_sd[j])
top_kernel <- dlnorm(current[j],meanlog = log( current[j]),prop_sd[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3])) + log(top_kernel)
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))  + log(bottom_kernel)
acc_prob <- exp(top - bottom)
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.06,0.06,0.02,0.02)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
bottom_kernel <- dlnorm(prop[j],meanlog = log( current[j]),prop_sd[j])
top_kernel <- dlnorm(current[j],meanlog = log( current[j]),prop_sd[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3])) + log(top_kernel)
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))  + log(bottom_kernel)
acc_prob <- exp(top - bottom)
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.09,0.09,0.03,0.03)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
bottom_kernel <- dlnorm(prop[j],meanlog = log( current[j]),prop_sd[j])
top_kernel <- dlnorm(current[j],meanlog = log( current[j]),prop_sd[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3])) + log(top_kernel)
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))  + log(bottom_kernel)
acc_prob <- exp(top - bottom)
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.09,0.09,0.03,0.03)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
#bottom_kernel <- dlnorm(prop[j],meanlog = log( current[j]),prop_sd[j])
#top_kernel <- dlnorm(current[j],meanlog = log( current[j]),prop_sd[j])
kernel.ratio<(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3])) + log(top_kernel)
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))  + log(bottom_kernel)
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.09,0.09,0.03,0.03)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
#bottom_kernel <- dlnorm(prop[j],meanlog = log( current[j]),prop_sd[j])
#top_kernel <- dlnorm(current[j],meanlog = log( current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3])) + log(top_kernel)
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))  + log(bottom_kernel)
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.09,0.09,0.03,0.03)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
#bottom_kernel <- dlnorm(prop[j],meanlog = log( current[j]),prop_sd[j])
#top_kernel <- dlnorm(current[j],meanlog = log( current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3]))
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.06,0.06,0.02,0.02)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
#bottom_kernel <- dlnorm(prop[j],meanlog = log( current[j]),prop_sd[j])
#top_kernel <- dlnorm(current[j],meanlog = log( current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3]))
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
tail(CM_params$chain,5)
#le taux d'acceaptation
CM_params$acc_rates
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.1,0.06,0.02,0.02)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3]))
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.1,0.06,0.08,0.02)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3]))
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.1,0.06,0.1,0.02)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3]))
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.1,0.06,0.5,0.02)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3]))
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.08,0.06,0.5,0.02)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3]))
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.08,0.06,0.5,0.01)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3]))
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
dugong <- function(age, Y, nchain = 10^4, prop_sd = c(0.08,0.06,0.5,0.009)){
init <- c(2.5, 0.9, 0.1, 0.9)  #alpha, beta (alpha et beta superieur à 1), tau (standard deviation donc on commence à 1) et gamma (entre 0 et 1 donc on prend 0.5)
chain <- matrix(NA, nchain + 1, 4)
chain[1,] <- init
acc_rates <- rep(0, 4)
n<-length(Y)
for (iter in 1:nchain){
current <- chain[iter,]
## Mise a jour de alpha, beta, tau et gamma
for (j in 1:4){
prop <- current
prop[j] <- rlnorm(1 ,meanlog = log(current[j]),prop_sd[j])
kernel.ratio<-(prop[j]/current[j])
top <- -(n/2)*log(prop[3]) - sum((Y - prop[1] - prop[2]*prop[4]^age)^2)*(1/(2*prop[3]))
bottom <- -(n/2)*log(current[3]) - sum((Y - current[1] - current[2]*current[4]^age)^2)*(1/(2*current[3]))
acc_prob <- exp(top - bottom)*kernel.ratio
if (runif(1) < acc_prob){
current <- prop
acc_rates[j] <- acc_rates[j] + 1
}
}
## Sauvegardons le nouvel etat
chain[iter+1,] <- current
}
return(list(chain = chain, acc_rates = acc_rates / nchain))
}
nchain=10000
CM_params <- dugong(X, Y, nchain )
#CM_params
## remove burning period
CM_params$chain <- CM_params$chain[-(1:1000),]
expression<-c('alpha','beta','tau','gamma')
#plot
for (j in 1:4)
plot(CM_params$chain[,j], type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
#on trace les densité
par(mfrow = c(1, 2), mar = c(4, 5, 0.5, 0.5))
for (j in 1:4)
plot(density(CM_params$chain[,j]), type = "l", ylab = expression[j])
#le taux d'acceaptation
CM_params$acc_rates
#ACP
acp(CM_params$chain )
